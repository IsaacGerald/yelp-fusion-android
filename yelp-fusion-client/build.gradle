apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        // com.fasterxml.jackson.core:jackson-databind includes duplicate licenses in it's own submodule dependencies.
        // Build fails because of this even though the submodules are not wrapped into the output artifacts. We exclude
        // the LICENSE files from the build so it doesn't fail the process.
        exclude 'META-INF/LICENSE'
    }
}

sourceSets {
    integrationTest {
        java {
            java.srcDirs = [
                    'src/main/java',
                    'src/test/java'
            ]
            resources.srcDirs =  [
                    'src/test/resources'
            ]
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath

    // Set upToDateWhen to false so integration tests always run when the task is called.
    outputs.upToDateWhen { false }
}

// Makes integration tests not run by default.
check.dependsOn -= integrationTest


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:appcompat-v7:26.0.0'
    implementation 'com.squareup.okhttp3:okhttp:3.6.0'
    implementation 'com.squareup.retrofit2:converter-jackson:2.2.0'
    implementation 'com.squareup.retrofit2:retrofit:2.2.0'

    testImplementation 'junit:junit:4.12'
    testImplementation 'com.squareup.retrofit2:converter-jackson:2.2.0'
    testImplementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.3'

}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

group = 'io.github.ranga543'
version = '0.1.5'

install {
    repositories.mavenInstaller {
        pom.project {
            name 'Yelp Fusion Client'
            description 'A library for accessing Yelp fusion API'
            url 'https://github.com/ranga543/yelp-fusion-android'
            inceptionYear '2016'

            packaging 'aar'
            groupId 'io.github.ranga543'
            artifactId 'yelp-fusion-client'
            version '0.1.5'

            licenses {
                license {
                    name 'The MIT License (MIT)'
                    url 'https://opensource.org/licenses/MIT'
                }
            }
            scm {
                connection 'https://github.com/ranga543/yelp-fusion-android.git'
                url 'https://github.com/ranga543/yelp-fusion-android.git'

            }
            developers {
                developer {
                    id = 'ranga543'
                    name 'Ranga'
                }
            }
        }
    }
}

Properties bintrayProperties = new Properties()
bintrayProperties.load(project.rootProject.file('bintray.properties').newDataInputStream())

bintray {
    user = bintrayProperties.getProperty('user')
    key = bintrayProperties.getProperty('key')
    configurations = ['archives']
    pkg {
        repo = 'android'
        name = 'yelp-fusion-client'
        userOrg = 'ranga543'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/ranga543/yelp-fusion-android.git'
        publish = true
        githubRepo = 'ranga543/yelp-fusion-android'
        githubReleaseNotesFile = 'README.md'
        version {
            name = '0.1.5'
            desc = 'Yelp Fusion Client 0.1.5'
            released = new Date()
            vcsTag = 'v0.1.5'
            gpg {
                sign = true
                passphrase = bintrayProperties.getProperty('gpg.password')
            }
        }
    }
}
